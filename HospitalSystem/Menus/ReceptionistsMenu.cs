using System;
  using HospitalSystem.BUS;
  using HospitalSystem.Models;

  namespace HospitalSystem.Menus
  {
      public static class ReceptionistsMenu
      {
          public static void Show(ReceptionistBUS bus)
          {
              while (true)
              {
                  Console.WriteLine("\n=== Qu·∫£n L√Ω L·ªÖ T√¢n ===");
                  Console.WriteLine("1. Th√™m l·ªÖ t√¢n");
                  Console.WriteLine("2. Xem danh s√°ch l·ªÖ t√¢n");
                  Console.WriteLine("3. C·∫≠p nh·∫≠t th√¥ng tin l·ªÖ t√¢n");
                  Console.WriteLine("4. X√≥a l·ªÖ t√¢n");
                  Console.WriteLine("5. Quay l·∫°i");
                  Console.Write("Ch·ªçn: ");

                  var choice = Console.ReadLine();
                  switch (choice)
                  {
                      case "1": Add(bus); break;
                      case "2": View(bus); break;
                      case "3": Update(bus); break;
                      case "4": Delete(bus); break;
                      case "5": return;
                      default: Console.WriteLine("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!"); break;
                  }
              }
          }

          private static void Add(ReceptionistBUS bus)
          {
              string? fullName = null;
              while (string.IsNullOrWhiteSpace(fullName) || fullName.Length < 3 || fullName.Length > 50 || !System.Text.RegularExpressions.Regex.IsMatch(fullName, @"^[\p{L}\s]+$"))
              {
                  Console.Write("T√™n l·ªÖ t√¢n: ");
                  fullName = Console.ReadLine()?.Trim();
                  if (string.IsNullOrWhiteSpace(fullName) || fullName.Length < 3 || fullName.Length > 50 || !System.Text.RegularExpressions.Regex.IsMatch(fullName, @"^[\p{L}\s]+$"))
                      Console.WriteLine("‚ùå T√™n ph·∫£i t·ª´ 3 ƒë·∫øn 50 k√Ω t·ª± v√† ch·ªâ ch·ª©a ch·ªØ c√°i!");
              }

              string? phone = null;
              while (string.IsNullOrWhiteSpace(phone) || !System.Text.RegularExpressions.Regex.IsMatch(phone, @"^[0-9]{10,11}$"))
              {
                  Console.Write("S·ªë ƒëi·ªán tho·∫°i: ");
                  phone = Console.ReadLine()?.Trim();
                  if (string.IsNullOrWhiteSpace(phone) || !System.Text.RegularExpressions.Regex.IsMatch(phone, @"^[0-9]{10,11}$"))
                      Console.WriteLine("‚ùå S·ªë ƒëi·ªán tho·∫°i ph·∫£i l√† 10 ho·∫∑c 11 s·ªë!");
              }

              string? email = null;
              while (string.IsNullOrWhiteSpace(email))
              {
                  Console.Write("Email: ");
                  email = Console.ReadLine()?.Trim();
                  if (string.IsNullOrWhiteSpace(email))
                      Console.WriteLine("‚ùå Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
              }

              var receptionist = new Receptionist
              {
                  FullName = fullName,
                  Phone = phone,
                  Email = email
              };

              bus.Add(receptionist);
              Console.WriteLine("‚úÖ Th√™m l·ªÖ t√¢n th√†nh c√¥ng!");
          }

          private static void View(ReceptionistBUS bus)
          {
              var list = bus.GetAll();
              if (list.Count == 0)
              {
                  Console.WriteLine("üì≠ Kh√¥ng c√≥ l·ªÖ t√¢n n√†o.");
                  return;
              }

              foreach (var r in list)
                  Console.WriteLine($"ID: {r.Id}, T√™n: {r.FullName}, SƒêT: {r.Phone}, Email: {r.Email}");
          }

          private static void Update(ReceptionistBUS bus)
          {
              int id;
              while (true)
              {
                  Console.Write("ID c·∫ßn c·∫≠p nh·∫≠t: ");
                  if (int.TryParse(Console.ReadLine(), out id) && id > 0) break;
                  Console.WriteLine("‚ùå ID kh√¥ng h·ª£p l·ªá!");
              }

              string? fullName = null;
              while (string.IsNullOrWhiteSpace(fullName) || fullName.Length < 3 || fullName.Length > 50 || !System.Text.RegularExpressions.Regex.IsMatch(fullName, @"^[\p{L}\s]+$"))
              {
                  Console.Write("T√™n m·ªõi: ");
                  fullName = Console.ReadLine()?.Trim();
                  if (string.IsNullOrWhiteSpace(fullName) || fullName.Length < 3 || fullName.Length > 50 || !System.Text.RegularExpressions.Regex.IsMatch(fullName, @"^[\p{L}\s]+$"))
                      Console.WriteLine("‚ùå T√™n ph·∫£i t·ª´ 3 ƒë·∫øn 50 k√Ω t·ª± v√† ch·ªâ ch·ª©a ch·ªØ c√°i!");
              }

              string? phone = null;
              while (string.IsNullOrWhiteSpace(phone) || !System.Text.RegularExpressions.Regex.IsMatch(phone, @"^[0-9]{10,11}$"))
              {
                  Console.Write("S·ªë ƒëi·ªán tho·∫°i m·ªõi: ");
                  phone = Console.ReadLine()?.Trim();
                  if (string.IsNullOrWhiteSpace(phone) || !System.Text.RegularExpressions.Regex.IsMatch(phone, @"^[0-9]{10,11}$"))
                      Console.WriteLine("‚ùå S·ªë ƒëi·ªán tho·∫°i ph·∫£i l√† 10 ho·∫∑c 11 s·ªë!");
              }

              string? email = null;
              while (string.IsNullOrWhiteSpace(email))
              {
                  Console.Write("Email m·ªõi: ");
                  email = Console.ReadLine()?.Trim();
                  if (string.IsNullOrWhiteSpace(email))
                      Console.WriteLine("‚ùå Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
              }

              var receptionist = new Receptionist
              {
                  Id = id,
                  FullName = fullName,
                  Phone = phone,
                  Email = email
              };

              bus.Update(receptionist);
              Console.WriteLine("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!");
          }

          private static void Delete(ReceptionistBUS bus)
          {
              int id;
              while (true)
              {
                  Console.Write("ID c·∫ßn x√≥a: ");
                  if (int.TryParse(Console.ReadLine(), out id) && id > 0) break;
                  Console.WriteLine("‚ùå ID kh√¥ng h·ª£p l·ªá!");
              }

              bus.Delete(id);
              Console.WriteLine("‚úÖ X√≥a l·ªÖ t√¢n th√†nh c√¥ng!");
          }
      }
  }