using System;
using System.Linq;
using HospitalSystem.BUS;
using HospitalSystem.Models;

namespace HospitalSystem.Menus
{
    public static class MedicalRecordsMenu
    {
        public static void Show(MedicalRecordBUS bus)
        {
            while (true)
            {
                Console.WriteLine("\n=== Qu·∫£n L√Ω H·ªì S∆° B·ªánh √Ån ===");
                Console.WriteLine("1. Th√™m h·ªì s∆° b·ªánh √°n");
                Console.WriteLine("2. Xem danh s√°ch h·ªì s∆° b·ªánh √°n");
                Console.WriteLine("3. C·∫≠p nh·∫≠t h·ªì s∆° b·ªánh √°n");
                Console.WriteLine("4. X√≥a h·ªì s∆° b·ªánh √°n");
                Console.WriteLine("5. Quay l·∫°i");
                Console.Write("Ch·ªçn: ");

                var choice = Console.ReadLine();
                switch (choice)
                {
                    case "1": Add(bus); break;
                    case "2": View(bus); break;
                    case "3": Update(bus); break;
                    case "4": Delete(bus); break;
                    case "5": return;
                    default: Console.WriteLine("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá."); break;
                }
            }
        }

        private static void Add(MedicalRecordBUS bus)
        {
            int patientId;
            while (true)
            {
                Console.Write("ID b·ªánh nh√¢n: ");
                if (int.TryParse(Console.ReadLine(), out patientId) && patientId > 0) break;
                Console.WriteLine("‚ùå ID b·ªánh nh√¢n kh√¥ng h·ª£p l·ªá!");
            }

            int doctorId;
            while (true)
            {
                Console.Write("ID b√°c sƒ©: ");
                if (int.TryParse(Console.ReadLine(), out doctorId) && doctorId > 0) break;
                Console.WriteLine("‚ùå ID b√°c sƒ© kh√¥ng h·ª£p l·ªá!");
            }

            string? diagnosis = null;
            while (string.IsNullOrWhiteSpace(diagnosis) || diagnosis.Length < 3 || diagnosis.Length > 500)
            {
                Console.Write("Ch·∫©n ƒëo√°n: ");
                diagnosis = Console.ReadLine()?.Trim();
                if (string.IsNullOrWhiteSpace(diagnosis) || diagnosis.Length < 3 || diagnosis.Length > 500)
                    Console.WriteLine("‚ùå Ch·∫©n ƒëo√°n ph·∫£i t·ª´ 3 ƒë·∫øn 500 k√Ω t·ª±!");
            }

            DateTime recordDate;
            while (true)
            {
                Console.Write("Ng√†y ghi nh·∫≠n (yyyy-MM-dd): ");
                if (DateTime.TryParse(Console.ReadLine(), out recordDate) && recordDate >= new DateTime(1900, 1, 1) && recordDate <= DateTime.Now) break;
                Console.WriteLine("‚ùå Ng√†y ghi nh·∫≠n ph·∫£i t·ª´ nƒÉm 1900 ƒë·∫øn hi·ªán t·∫°i!");
            }

            string? treatment = null;
            while (string.IsNullOrWhiteSpace(treatment) || treatment.Length < 3 || treatment.Length > 500)
            {
                Console.Write("Ph∆∞∆°ng ph√°p ƒëi·ªÅu tr·ªã: ");
                treatment = Console.ReadLine()?.Trim();
                if (string.IsNullOrWhiteSpace(treatment) || treatment.Length < 3 || treatment.Length > 500)
                    Console.WriteLine("‚ùå Ph∆∞∆°ng ph√°p ƒëi·ªÅu tr·ªã ph·∫£i t·ª´ 3 ƒë·∫øn 500 k√Ω t·ª±!");
            }

            var record = new MedicalRecord
            {
                PatientId = patientId,
                DoctorId = doctorId,
                Diagnosis = diagnosis,
                RecordDate = recordDate,
                Treatment = treatment // ƒê·∫£m b·∫£o required property ƒë∆∞·ª£c kh·ªüi t·∫°o
            };

            try
            {
                bus.Add(record);
                Console.WriteLine("‚úÖ Th√™m h·ªì s∆° b·ªánh √°n th√†nh c√¥ng!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói: {ex.Message}");
            }
        }

        private static void View(MedicalRecordBUS bus)
        {
            var list = bus.GetAll();
            if (list.Count == 0)
            {
                Console.WriteLine("üì≠ Kh√¥ng c√≥ h·ªì s∆° b·ªánh √°n.");
                return;
            }

            foreach (var r in list)
                Console.WriteLine($"ID: {r.Id}, B·ªánh nh√¢n ID: {r.PatientId}, B√°c sƒ© ID: {r.DoctorId}, Ch·∫©n ƒëo√°n: {r.Diagnosis}, Ng√†y: {r.RecordDate:yyyy-MM-dd}, ƒêi·ªÅu tr·ªã: {r.Treatment}");
        }

        private static void Update(MedicalRecordBUS bus)
        {
            int id;
            while (true)
            {
                Console.Write("ID c·∫ßn c·∫≠p nh·∫≠t: ");
                if (int.TryParse(Console.ReadLine(), out id) && id > 0) break;
                Console.WriteLine("‚ùå ID kh√¥ng h·ª£p l·ªá.");
            }

            int patientId;
            while (true)
            {
                Console.Write("ID b·ªánh nh√¢n m·ªõi: ");
                if (int.TryParse(Console.ReadLine(), out patientId) && patientId > 0) break;
                Console.WriteLine("‚ùå ID b·ªánh nh√¢n kh√¥ng h·ª£p l·ªá!");
            }

            int doctorId;
            while (true)
            {
                Console.Write("ID b√°c sƒ© m·ªõi: ");
                if (int.TryParse(Console.ReadLine(), out doctorId) && doctorId > 0) break;
                Console.WriteLine("‚ùå ID b√°c sƒ© kh√¥ng h·ª£p l·ªá!");
            }

            string? diagnosis = null;
            while (string.IsNullOrWhiteSpace(diagnosis) || diagnosis.Length < 3 || diagnosis.Length > 500)
            {
                Console.Write("Ch·∫©n ƒëo√°n m·ªõi: ");
                diagnosis = Console.ReadLine()?.Trim();
                if (string.IsNullOrWhiteSpace(diagnosis) || diagnosis.Length < 3 || diagnosis.Length > 500)
                    Console.WriteLine("‚ùå Ch·∫©n ƒëo√°n ph·∫£i t·ª´ 3 ƒë·∫øn 500 k√Ω t·ª±!");
            }

            DateTime recordDate;
            while (true)
            {
                Console.Write("Ng√†y ghi nh·∫≠n m·ªõi (yyyy-MM-dd): ");
                if (DateTime.TryParse(Console.ReadLine(), out recordDate) && recordDate >= new DateTime(1900, 1, 1) && recordDate <= DateTime.Now) break;
                Console.WriteLine("‚ùå Ng√†y ghi nh·∫≠n ph·∫£i t·ª´ nƒÉm 1900 ƒë·∫øn hi·ªán t·∫°i!");
            }

            string? treatment = null;
            while (string.IsNullOrWhiteSpace(treatment) || treatment.Length < 3 || treatment.Length > 500)
            {
                Console.Write("Ph∆∞∆°ng ph√°p ƒëi·ªÅu tr·ªã m·ªõi: ");
                treatment = Console.ReadLine()?.Trim();
                if (string.IsNullOrWhiteSpace(treatment) || treatment.Length < 3 || treatment.Length > 500)
                    Console.WriteLine("‚ùå Ph∆∞∆°ng ph√°p ƒëi·ªÅu tr·ªã ph·∫£i t·ª´ 3 ƒë·∫øn 500 k√Ω t·ª±!");
            }

            var record = new MedicalRecord
            {
                Id = id,
                PatientId = patientId,
                DoctorId = doctorId,
                Diagnosis = diagnosis,
                RecordDate = recordDate,
                Treatment = treatment // ƒê·∫£m b·∫£o required property ƒë∆∞·ª£c kh·ªüi t·∫°o
            };

            try
            {
                bus.Update(record);
                Console.WriteLine("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói: {ex.Message}");
            }
        }

        private static void Delete(MedicalRecordBUS bus)
        {
            int id;
            while (true)
            {
                Console.Write("ID c·∫ßn x√≥a: ");
                if (int.TryParse(Console.ReadLine(), out id) && id > 0) break;
                Console.WriteLine("‚ùå ID kh√¥ng h·ª£p l·ªá.");
            }

            try
            {
                bus.Delete(id);
                Console.WriteLine("‚úÖ ƒê√£ x√≥a h·ªì s∆° b·ªánh √°n!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói: {ex.Message}");
            }
        }
    }
}