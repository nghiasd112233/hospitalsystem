using System;
using System.Linq;
using HospitalSystem.BUS;
using HospitalSystem.Models;

namespace HospitalSystem.Menus
{
    public static class AdminsMenu
    {
        public static void Show(AdminBUS bus)
        {
            while (true)
            {
                Console.WriteLine("\n=== Qu·∫£n L√Ω Qu·∫£n Tr·ªã Vi√™n ===");
                Console.WriteLine("1. Th√™m qu·∫£n tr·ªã vi√™n");
                Console.WriteLine("2. Xem danh s√°ch qu·∫£n tr·ªã vi√™n");
                Console.WriteLine("3. C·∫≠p nh·∫≠t qu·∫£n tr·ªã vi√™n");
                Console.WriteLine("4. X√≥a qu·∫£n tr·ªã vi√™n");
                Console.WriteLine("5. Quay l·∫°i");
                Console.Write("Ch·ªçn: ");

                var choice = Console.ReadLine();
                switch (choice)
                {
                    case "1": Add(bus); break;
                    case "2": View(bus); break;
                    case "3": Update(bus); break;
                    case "4": Delete(bus); break;
                    case "5": return;
                    default: Console.WriteLine("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá."); break;
                }
            }
        }

        private static void Add(AdminBUS bus)
        {
            string? fullName = null;
            while (string.IsNullOrWhiteSpace(fullName) || fullName.Length < 3 || fullName.Length > 50 || !System.Text.RegularExpressions.Regex.IsMatch(fullName, @"^[\p{L}\s]+$"))
            {
                Console.Write("T√™n qu·∫£n tr·ªã vi√™n: ");
                fullName = Console.ReadLine()?.Trim();
                if (string.IsNullOrWhiteSpace(fullName) || fullName.Length < 3 || fullName.Length > 50 || !System.Text.RegularExpressions.Regex.IsMatch(fullName, @"^[\p{L}\s]+$"))
                    Console.WriteLine("‚ùå T√™n ph·∫£i t·ª´ 3 ƒë·∫øn 50 k√Ω t·ª± v√† ch·ªâ ch·ª©a ch·ªØ c√°i!");
            }

            string? email = null;
            while (string.IsNullOrWhiteSpace(email) || !System.Text.RegularExpressions.Regex.IsMatch(email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
            {
                Console.Write("Email: ");
                email = Console.ReadLine()?.Trim();
                if (string.IsNullOrWhiteSpace(email) || !System.Text.RegularExpressions.Regex.IsMatch(email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
                    Console.WriteLine("‚ùå Email kh√¥ng h·ª£p l·ªá!");
            }

            string? phone = null;
            while (string.IsNullOrWhiteSpace(phone) || !System.Text.RegularExpressions.Regex.IsMatch(phone, @"^[0-9]{10,11}$"))
            {
                Console.Write("S·ªë ƒëi·ªán tho·∫°i: ");
                phone = Console.ReadLine()?.Trim();
                if (string.IsNullOrWhiteSpace(phone) || !System.Text.RegularExpressions.Regex.IsMatch(phone, @"^[0-9]{10,11}$"))
                    Console.WriteLine("‚ùå S·ªë ƒëi·ªán tho·∫°i ph·∫£i l√† 10 ho·∫∑c 11 s·ªë!");
            }

            var admin = new Admin
            {
                FullName = fullName,
                Email = email,
                Phone = phone ?? string.Empty // ƒê·∫£m b·∫£o required property ƒë∆∞·ª£c kh·ªüi t·∫°o
            };

            try
            {
                bus.Add(admin);
                Console.WriteLine("‚úÖ Th√™m qu·∫£n tr·ªã vi√™n th√†nh c√¥ng!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói: {ex.Message}");
            }
        }

        private static void View(AdminBUS bus)
        {
            var list = bus.GetAll();
            if (list.Count == 0)
            {
                Console.WriteLine("üì≠ Kh√¥ng c√≥ qu·∫£n tr·ªã vi√™n.");
                return;
            }

            foreach (var a in list)
                Console.WriteLine($"ID: {a.Id}, T√™n: {a.FullName}, Email: {a.Email}, SƒêT: {a.Phone}");
        }

        private static void Update(AdminBUS bus)
        {
            int id;
            while (true)
            {
                Console.Write("ID c·∫ßn c·∫≠p nh·∫≠t: ");
                if (int.TryParse(Console.ReadLine(), out id) && id > 0) break;
                Console.WriteLine("‚ùå ID kh√¥ng h·ª£p l·ªá.");
            }

            string? fullName = null;
            while (string.IsNullOrWhiteSpace(fullName) || fullName.Length < 3 || fullName.Length > 50 || !System.Text.RegularExpressions.Regex.IsMatch(fullName, @"^[\p{L}\s]+$"))
            {
                Console.Write("T√™n m·ªõi: ");
                fullName = Console.ReadLine()?.Trim();
                if (string.IsNullOrWhiteSpace(fullName) || fullName.Length < 3 || fullName.Length > 50 || !System.Text.RegularExpressions.Regex.IsMatch(fullName, @"^[\p{L}\s]+$"))
                    Console.WriteLine("‚ùå T√™n ph·∫£i t·ª´ 3 ƒë·∫øn 50 k√Ω t·ª± v√† ch·ªâ ch·ª©a ch·ªØ c√°i!");
            }

            string? email = null;
            while (string.IsNullOrWhiteSpace(email) || !System.Text.RegularExpressions.Regex.IsMatch(email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
            {
                Console.Write("Email m·ªõi: ");
                email = Console.ReadLine()?.Trim();
                if (string.IsNullOrWhiteSpace(email) || !System.Text.RegularExpressions.Regex.IsMatch(email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
                    Console.WriteLine("‚ùå Email kh√¥ng h·ª£p l·ªá!");
            }

            string? phone = null;
            while (string.IsNullOrWhiteSpace(phone) || !System.Text.RegularExpressions.Regex.IsMatch(phone, @"^[0-9]{10,11}$"))
            {
                Console.Write("S·ªë ƒëi·ªán tho·∫°i m·ªõi: ");
                phone = Console.ReadLine()?.Trim();
                if (string.IsNullOrWhiteSpace(phone) || !System.Text.RegularExpressions.Regex.IsMatch(phone, @"^[0-9]{10,11}$"))
                    Console.WriteLine("‚ùå S·ªë ƒëi·ªán tho·∫°i ph·∫£i l√† 10 ho·∫∑c 11 s·ªë!");
            }

            var admin = new Admin
            {
                Id = id,
                FullName = fullName,
                Email = email,
                Phone = phone ?? string.Empty // ƒê·∫£m b·∫£o required property ƒë∆∞·ª£c kh·ªüi t·∫°o
            };

            try
            {
                bus.Update(admin);
                Console.WriteLine("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói: {ex.Message}");
            }
        }

        private static void Delete(AdminBUS bus)
        {
            int id;
            while (true)
            {
                Console.Write("ID c·∫ßn x√≥a: ");
                if (int.TryParse(Console.ReadLine(), out id) && id > 0) break;
                Console.WriteLine("‚ùå ID kh√¥ng h·ª£p l·ªá.");
            }

            try
            {
                bus.Delete(id);
                Console.WriteLine("‚úÖ ƒê√£ x√≥a qu·∫£n tr·ªã vi√™n!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói: {ex.Message}");
            }
        }
    }
}