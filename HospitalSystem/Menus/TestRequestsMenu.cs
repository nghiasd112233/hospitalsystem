using System;
  using HospitalSystem.BUS;
  using HospitalSystem.Models;

  namespace HospitalSystem.Menus
  {
      public static class TestRequestsMenu
      {
          public static void Show(TestRequestBUS bus)
          {
              while (true)
              {
                  Console.WriteLine("\n=== Qu·∫£n L√Ω Y√™u C·∫ßu X√©t Nghi·ªám ===");
                  Console.WriteLine("1. Th√™m y√™u c·∫ßu");
                  Console.WriteLine("2. Xem danh s√°ch y√™u c·∫ßu");
                  Console.WriteLine("3. C·∫≠p nh·∫≠t y√™u c·∫ßu");
                  Console.WriteLine("4. X√≥a y√™u c·∫ßu");
                  Console.WriteLine("5. Quay l·∫°i");
                  Console.Write("Ch·ªçn: ");

                  var choice = Console.ReadLine();
                  switch (choice)
                  {
                      case "1": Add(bus); break;
                      case "2": View(bus); break;
                      case "3": Update(bus); break;
                      case "4": Delete(bus); break;
                      case "5": return;
                      default: Console.WriteLine("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!"); break;
                  }
              }
          }

          private static void Add(TestRequestBUS bus)
          {
              int patientId;
              while (true)
              {
                  Console.Write("ID b·ªánh nh√¢n: ");
                  if (int.TryParse(Console.ReadLine(), out patientId) && patientId > 0) break;
                  Console.WriteLine("‚ùå ID b·ªánh nh√¢n kh√¥ng h·ª£p l·ªá!");
              }

              int doctorId;
              while (true)
              {
                  Console.Write("ID b√°c sƒ© y√™u c·∫ßu: ");
                  if (int.TryParse(Console.ReadLine(), out doctorId) && doctorId > 0) break;
                  Console.WriteLine("‚ùå ID b√°c sƒ© kh√¥ng h·ª£p l·ªá!");
              }

              string? testName = null;
              while (string.IsNullOrWhiteSpace(testName) || testName.Length < 3 || testName.Length > 100)
              {
                  Console.Write("T√™n x√©t nghi·ªám: ");
                  testName = Console.ReadLine()?.Trim();
                  if (string.IsNullOrWhiteSpace(testName) || testName.Length < 3 || testName.Length > 100)
                      Console.WriteLine("‚ùå T√™n x√©t nghi·ªám ph·∫£i t·ª´ 3 ƒë·∫øn 100 k√Ω t·ª±!");
              }

              string? status = null;
              while (string.IsNullOrWhiteSpace(status) || Array.IndexOf(new[] { "Pending", "Completed", "Canceled" }, status) == -1)
              {
                  Console.Write("Tr·∫°ng th√°i (Pending/Completed/Canceled): ");
                  status = Console.ReadLine()?.Trim();
                  if (string.IsNullOrWhiteSpace(status) || Array.IndexOf(new[] { "Pending", "Completed", "Canceled" }, status) == -1)
                      Console.WriteLine("‚ùå Tr·∫°ng th√°i ph·∫£i l√† Pending, Completed ho·∫∑c Canceled!");
              }

              DateTime requestDate;
              while (true)
              {
                  Console.Write("Ng√†y y√™u c·∫ßu (yyyy-MM-dd): ");
                  if (DateTime.TryParse(Console.ReadLine(), out requestDate)) break;
                  Console.WriteLine("‚ùå Ng√†y kh√¥ng h·ª£p l·ªá!");
              }

              var request = new TestRequest
              {
                  PatientId = patientId,
                  DoctorId = doctorId,
                  TestName = testName,
                  Status = status,
                  RequestDate = requestDate
              };

              bus.Add(request);
              Console.WriteLine("‚úÖ Th√™m y√™u c·∫ßu th√†nh c√¥ng!");
          }

          private static void View(TestRequestBUS bus)
          {
              var list = bus.GetAll();
              if (list.Count == 0)
              {
                  Console.WriteLine("üì≠ Kh√¥ng c√≥ y√™u c·∫ßu n√†o.");
                  return;
              }

              foreach (var r in list)
              {
                  Console.WriteLine($"ID: {r.Id}, B·ªánh nh√¢n ID: {r.PatientId}, B√°c sƒ© ID: {r.DoctorId}, T√™n x√©t nghi·ªám: {r.TestName}, Tr·∫°ng th√°i: {r.Status}, Ng√†y: {r.RequestDate:yyyy-MM-dd}");
              }
          }

          private static void Update(TestRequestBUS bus)
          {
              int id;
              while (true)
              {
                  Console.Write("ID c·∫ßn c·∫≠p nh·∫≠t: ");
                  if (int.TryParse(Console.ReadLine(), out id) && id > 0) break;
                  Console.WriteLine("‚ùå ID kh√¥ng h·ª£p l·ªá!");
              }

              int patientId;
              while (true)
              {
                  Console.Write("ID b·ªánh nh√¢n m·ªõi: ");
                  if (int.TryParse(Console.ReadLine(), out patientId) && patientId > 0) break;
                  Console.WriteLine("‚ùå ID b·ªánh nh√¢n kh√¥ng h·ª£p l·ªá!");
              }

              int doctorId;
              while (true)
              {
                  Console.Write("ID b√°c sƒ© m·ªõi: ");
                  if (int.TryParse(Console.ReadLine(), out doctorId) && doctorId > 0) break;
                  Console.WriteLine("‚ùå ID b√°c sƒ© kh√¥ng h·ª£p l·ªá!");
              }

              string? testName = null;
              while (string.IsNullOrWhiteSpace(testName) || testName.Length < 3 || testName.Length > 100)
              {
                  Console.Write("T√™n x√©t nghi·ªám m·ªõi: ");
                  testName = Console.ReadLine()?.Trim();
                  if (string.IsNullOrWhiteSpace(testName) || testName.Length < 3 || testName.Length > 100)
                      Console.WriteLine("‚ùå T√™n x√©t nghi·ªám ph·∫£i t·ª´ 3 ƒë·∫øn 100 k√Ω t·ª±!");
              }

              string? status = null;
              while (string.IsNullOrWhiteSpace(status) || Array.IndexOf(new[] { "Pending", "Completed", "Canceled" }, status) == -1)
              {
                  Console.Write("Tr·∫°ng th√°i m·ªõi (Pending/Completed/Canceled): ");
                  status = Console.ReadLine()?.Trim();
                  if (string.IsNullOrWhiteSpace(status) || Array.IndexOf(new[] { "Pending", "Completed", "Canceled" }, status) == -1)
                      Console.WriteLine("‚ùå Tr·∫°ng th√°i ph·∫£i l√† Pending, Completed ho·∫∑c Canceled!");
              }

              DateTime requestDate;
              while (true)
              {
                  Console.Write("Ng√†y y√™u c·∫ßu m·ªõi (yyyy-MM-dd): ");
                  if (DateTime.TryParse(Console.ReadLine(), out requestDate)) break;
                  Console.WriteLine("‚ùå Ng√†y kh√¥ng h·ª£p l·ªá!");
              }

              var request = new TestRequest
              {
                  Id = id,
                  PatientId = patientId,
                  DoctorId = doctorId,
                  TestName = testName,
                  Status = status,
                  RequestDate = requestDate
              };

              bus.Update(request);
              Console.WriteLine("‚úÖ C·∫≠p nh·∫≠t y√™u c·∫ßu th√†nh c√¥ng!");
          }

          private static void Delete(TestRequestBUS bus)
          {
              int id;
              while (true)
              {
                  Console.Write("ID c·∫ßn x√≥a: ");
                  if (int.TryParse(Console.ReadLine(), out id) && id > 0) break;
                  Console.WriteLine("‚ùå ID kh√¥ng h·ª£p l·ªá!");
              }

              bus.Delete(id);
              Console.WriteLine("‚úÖ X√≥a y√™u c·∫ßu th√†nh c√¥ng!");
          }
      }
  } 