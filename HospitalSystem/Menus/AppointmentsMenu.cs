using System;
using System.Linq;
using HospitalSystem.BUS;
using HospitalSystem.Models;

namespace HospitalSystem.Menus
{
    public static class AppointmentsMenu
    {
        public static void Show(AppointmentBUS bus)
        {
            while (true)
            {
                Console.WriteLine("\n=== Qu·∫£n L√Ω L·ªãch H·∫πn ===");
                Console.WriteLine("1. Th√™m l·ªãch h·∫πn");
                Console.WriteLine("2. Xem danh s√°ch l·ªãch h·∫πn");
                Console.WriteLine("3. C·∫≠p nh·∫≠t l·ªãch h·∫πn");
                Console.WriteLine("4. X√≥a l·ªãch h·∫πn");
                Console.WriteLine("5. Quay l·∫°i");
                Console.Write("Ch·ªçn: ");

                var choice = Console.ReadLine();
                switch (choice)
                {
                    case "1": Add(bus); break;
                    case "2": View(bus); break;
                    case "3": Update(bus); break;
                    case "4": Delete(bus); break;
                    case "5": return;
                    default: Console.WriteLine("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá."); break;
                }
            }
        }

        private static void Add(AppointmentBUS bus)
        {
            int patientId;
            while (true)
            {
                Console.Write("ID b·ªánh nh√¢n: ");
                if (int.TryParse(Console.ReadLine(), out patientId) && patientId > 0) break;
                Console.WriteLine("‚ùå ID b·ªánh nh√¢n kh√¥ng h·ª£p l·ªá!");
            }

            int doctorId;
            while (true)
            {
                Console.Write("ID b√°c sƒ©: ");
                if (int.TryParse(Console.ReadLine(), out doctorId) && doctorId > 0) break;
                Console.WriteLine("‚ùå ID b√°c sƒ© kh√¥ng h·ª£p l·ªá!");
            }

            DateTime appointmentDate;
            while (true)
            {
                Console.Write("Ng√†y h·∫πn (yyyy-MM-dd HH:mm): ");
                if (DateTime.TryParse(Console.ReadLine(), out appointmentDate) && appointmentDate >= DateTime.Now) break;
                Console.WriteLine("‚ùå Ng√†y h·∫πn ph·∫£i t·ª´ h√¥m nay tr·ªü ƒëi!");
            }

            string? status = null;
            while (string.IsNullOrWhiteSpace(status) || !new[] { "Scheduled", "Completed", "Canceled" }.Contains(status))
            {
                Console.Write("Tr·∫°ng th√°i (Scheduled/Completed/Canceled): ");
                status = Console.ReadLine()?.Trim();
                if (string.IsNullOrWhiteSpace(status) || !new[] { "Scheduled", "Completed", "Canceled" }.Contains(status))
                    Console.WriteLine("‚ùå Tr·∫°ng th√°i ph·∫£i l√† Scheduled, Completed ho·∫∑c Canceled!");
            }

            var appointment = new Appointment
            {
                PatientId = patientId,
                DoctorId = doctorId,
                AppointmentDate = appointmentDate,
                Status = status
            };

            try
            {
                bus.Add(appointment);
                Console.WriteLine("‚úÖ Th√™m l·ªãch h·∫πn th√†nh c√¥ng!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói: {ex.Message}");
            }
        }

        private static void View(AppointmentBUS bus)
        {
            var list = bus.GetAll();
            if (list.Count == 0)
            {
                Console.WriteLine("üì≠ Kh√¥ng c√≥ l·ªãch h·∫πn.");
                return;
            }

            foreach (var a in list)
                Console.WriteLine($"ID: {a.Id}, B·ªánh nh√¢n ID: {a.PatientId}, B√°c sƒ© ID: {a.DoctorId}, Ng√†y: {a.AppointmentDate:yyyy-MM-dd HH:mm}, Tr·∫°ng th√°i: {a.Status}");
        }

        private static void Update(AppointmentBUS bus)
        {
            int id;
            while (true)
            {
                Console.Write("ID c·∫ßn c·∫≠p nh·∫≠t: ");
                if (int.TryParse(Console.ReadLine(), out id) && id > 0) break;
                Console.WriteLine("‚ùå ID kh√¥ng h·ª£p l·ªá.");
            }

            int patientId;
            while (true)
            {
                Console.Write("ID b·ªánh nh√¢n m·ªõi: ");
                if (int.TryParse(Console.ReadLine(), out patientId) && patientId > 0) break;
                Console.WriteLine("‚ùå ID b·ªánh nh√¢n kh√¥ng h·ª£p l·ªá!");
            }

            int doctorId;
            while (true)
            {
                Console.Write("ID b√°c sƒ© m·ªõi: ");
                if (int.TryParse(Console.ReadLine(), out doctorId) && doctorId > 0) break;
                Console.WriteLine("‚ùå ID b√°c sƒ© kh√¥ng h·ª£p l·ªá!");
            }

            DateTime appointmentDate;
            while (true)
            {
                Console.Write("Ng√†y h·∫πn m·ªõi (yyyy-MM-dd HH:mm): ");
                if (DateTime.TryParse(Console.ReadLine(), out appointmentDate) && appointmentDate >= DateTime.Now) break;
                Console.WriteLine("‚ùå Ng√†y h·∫πn ph·∫£i t·ª´ h√¥m nay tr·ªü ƒëi!");
            }

            string? status = null;
            while (string.IsNullOrWhiteSpace(status) || !new[] { "Scheduled", "Completed", "Canceled" }.Contains(status))
            {
                Console.Write("Tr·∫°ng th√°i m·ªõi (Scheduled/Completed/Canceled): ");
                status = Console.ReadLine()?.Trim();
                if (string.IsNullOrWhiteSpace(status) || !new[] { "Scheduled", "Completed", "Canceled" }.Contains(status))
                    Console.WriteLine("‚ùå Tr·∫°ng th√°i ph·∫£i l√† Scheduled, Completed ho·∫∑c Canceled!");
            }

            var appointment = new Appointment
            {
                Id = id,
                PatientId = patientId,
                DoctorId = doctorId,
                AppointmentDate = appointmentDate,
                Status = status
            };

            try
            {
                bus.Update(appointment);
                Console.WriteLine("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói: {ex.Message}");
            }
        }

        private static void Delete(AppointmentBUS bus)
        {
            int id;
            while (true)
            {
                Console.Write("ID c·∫ßn x√≥a: ");
                if (int.TryParse(Console.ReadLine(), out id) && id > 0) break;
                Console.WriteLine("‚ùå ID kh√¥ng h·ª£p l·ªá.");
            }

            try
            {
                bus.Delete(id);
                Console.WriteLine("‚úÖ ƒê√£ x√≥a l·ªãch h·∫πn!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói: {ex.Message}");
            }
        }
    }
}