using System;
  using System.Linq; // B·∫Øt bu·ªôc ƒë·ªÉ d√πng .Where
  using HospitalSystem.BUS;
  using HospitalSystem.Models;

  namespace HospitalSystem.Menus
  {
      public static class NursesMenu
      {
          public static void Show(UserBUS nurseBUS)
          {
              while (true)
              {
                  Console.WriteLine("\n=== Qu·∫£n L√Ω ƒêi·ªÅu D∆∞·ª°ng ===");
                  Console.WriteLine("1. Th√™m ƒëi·ªÅu d∆∞·ª°ng");
                  Console.WriteLine("2. Xem danh s√°ch ƒëi·ªÅu d∆∞·ª°ng");
                  Console.WriteLine("3. C·∫≠p nh·∫≠t ƒëi·ªÅu d∆∞·ª°ng");
                  Console.WriteLine("4. X√≥a ƒëi·ªÅu d∆∞·ª°ng");
                  Console.WriteLine("5. Quay l·∫°i");
                  Console.Write("Ch·ªçn: ");

                  var choice = Console.ReadLine();
                  switch (choice)
                  {
                      case "1": Add(nurseBUS); break;
                      case "2": View(nurseBUS); break;
                      case "3": Update(nurseBUS); break;
                      case "4": Delete(nurseBUS); break;
                      case "5": return;
                      default: Console.WriteLine("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá."); break;
                  }
              }
          }

          private static void Add(UserBUS bus)
          {
              string? fullName = null;
              while (string.IsNullOrWhiteSpace(fullName) || fullName.Length < 3 || fullName.Length > 50 || !System.Text.RegularExpressions.Regex.IsMatch(fullName, @"^[\p{L}\s]+$"))
              {
                  Console.Write("T√™n ƒëi·ªÅu d∆∞·ª°ng: ");
                  fullName = Console.ReadLine()?.Trim();
                  if (string.IsNullOrWhiteSpace(fullName) || fullName.Length < 3 || fullName.Length > 50 || !System.Text.RegularExpressions.Regex.IsMatch(fullName, @"^[\p{L}\s]+$"))
                      Console.WriteLine("‚ùå T√™n ph·∫£i t·ª´ 3 ƒë·∫øn 50 k√Ω t·ª± v√† ch·ªâ ch·ª©a ch·ªØ c√°i!");
              }

              string? email = null;
              while (string.IsNullOrWhiteSpace(email) || !System.Text.RegularExpressions.Regex.IsMatch(email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
              {
                  Console.Write("Email: ");
                  email = Console.ReadLine()?.Trim();
                  if (string.IsNullOrWhiteSpace(email) || !System.Text.RegularExpressions.Regex.IsMatch(email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
                      Console.WriteLine("‚ùå Email kh√¥ng h·ª£p l·ªá!");
              }

              var nurse = new User
              {
                  FullName = fullName,
                  Email = email,
                  Role = "Nurse"
              };

              bus.Add(nurse);
              Console.WriteLine("‚úÖ Th√™m ƒëi·ªÅu d∆∞·ª°ng th√†nh c√¥ng!");
          }

          private static void View(UserBUS bus)
          {
              var nurses = bus.GetAll().Where(u => u.Role == "Nurse").ToList();
              if (nurses.Count == 0)
              {
                  Console.WriteLine("üì≠ Kh√¥ng c√≥ ƒëi·ªÅu d∆∞·ª°ng.");
                  return;
              }

              foreach (var n in nurses)
                  Console.WriteLine($"ID: {n.Id}, T√™n: {n.FullName}, Email: {n.Email}");
          }

          private static void Update(UserBUS bus)
          {
              int id;
              while (true)
              {
                  Console.Write("ID c·∫ßn c·∫≠p nh·∫≠t: ");
                  if (int.TryParse(Console.ReadLine(), out id) && id > 0) break;
                  Console.WriteLine("‚ùå ID kh√¥ng h·ª£p l·ªá.");
              }

              string? fullName = null;
              while (string.IsNullOrWhiteSpace(fullName) || fullName.Length < 3 || fullName.Length > 50 || !System.Text.RegularExpressions.Regex.IsMatch(fullName, @"^[\p{L}\s]+$"))
              {
                  Console.Write("T√™n m·ªõi: ");
                  fullName = Console.ReadLine()?.Trim();
                  if (string.IsNullOrWhiteSpace(fullName) || fullName.Length < 3 || fullName.Length > 50 || !System.Text.RegularExpressions.Regex.IsMatch(fullName, @"^[\p{L}\s]+$"))
                      Console.WriteLine("‚ùå T√™n ph·∫£i t·ª´ 3 ƒë·∫øn 50 k√Ω t·ª± v√† ch·ªâ ch·ª©a ch·ªØ c√°i!");
              }

              string? email = null;
              while (string.IsNullOrWhiteSpace(email) || !System.Text.RegularExpressions.Regex.IsMatch(email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
              {
                  Console.Write("Email m·ªõi: ");
                  email = Console.ReadLine()?.Trim();
                  if (string.IsNullOrWhiteSpace(email) || !System.Text.RegularExpressions.Regex.IsMatch(email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
                      Console.WriteLine("‚ùå Email kh√¥ng h·ª£p l·ªá!");
              }

              var nurse = new User
              {
                  Id = id,
                  FullName = fullName,
                  Email = email,
                  Role = "Nurse"
              };

              bus.Update(nurse);
              Console.WriteLine("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!");
          }

          private static void Delete(UserBUS bus)
          {
              int id;
              while (true)
              {
                  Console.Write("ID c·∫ßn x√≥a: ");
                  if (int.TryParse(Console.ReadLine(), out id) && id > 0) break;
                  Console.WriteLine("‚ùå ID kh√¥ng h·ª£p l·ªá.");
              }

              bus.Delete(id);
              Console.WriteLine("‚úÖ ƒê√£ x√≥a ƒëi·ªÅu d∆∞·ª°ng!");
          }
      }
  }