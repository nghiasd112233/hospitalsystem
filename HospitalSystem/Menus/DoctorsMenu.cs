using System;
using System.Linq;
using HospitalSystem.BUS;
using HospitalSystem.Models;

namespace HospitalSystem.Menus
{
    public static class DoctorsMenu
    {
        public static void Show(DoctorBUS bus)
        {
            while (true)
            {
                Console.WriteLine("\n=== Qu·∫£n L√Ω B√°c Sƒ© ===");
                Console.WriteLine("1. Th√™m b√°c sƒ©");
                Console.WriteLine("2. Xem danh s√°ch b√°c sƒ©");
                Console.WriteLine("3. C·∫≠p nh·∫≠t b√°c sƒ©");
                Console.WriteLine("4. X√≥a b√°c sƒ©");
                Console.WriteLine("5. Quay l·∫°i");
                Console.Write("Ch·ªçn: ");

                var choice = Console.ReadLine();
                switch (choice)
                {
                    case "1": Add(bus); break;
                    case "2": View(bus); break;
                    case "3": Update(bus); break;
                    case "4": Delete(bus); break;
                    case "5": return;
                    default: Console.WriteLine("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá."); break;
                }
            }
        }

        private static void Add(DoctorBUS bus)
        {
            string? fullName = null;
            while (string.IsNullOrWhiteSpace(fullName) || fullName.Length < 3 || fullName.Length > 50 || !System.Text.RegularExpressions.Regex.IsMatch(fullName, @"^[\p{L}\s]+$"))
            {
                Console.Write("T√™n b√°c sƒ©: ");
                fullName = Console.ReadLine()?.Trim();
                if (string.IsNullOrWhiteSpace(fullName) || fullName.Length < 3 || fullName.Length > 50 || !System.Text.RegularExpressions.Regex.IsMatch(fullName, @"^[\p{L}\s]+$"))
                    Console.WriteLine("‚ùå T√™n ph·∫£i t·ª´ 3 ƒë·∫øn 50 k√Ω t·ª± v√† ch·ªâ ch·ª©a ch·ªØ c√°i!");
            }

            string? specialty = null;
            while (specialty != null && specialty.Length > 100)
            {
                Console.Write("Chuy√™n m√¥n (nh·∫•n Enter ƒë·ªÉ b·ªè qua): ");
                specialty = Console.ReadLine()?.Trim();
                if (specialty != null && specialty.Length > 100)
                    Console.WriteLine("‚ùå Chuy√™n m√¥n kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 100 k√Ω t·ª±!");
            }

            string? phone = null;
            while (string.IsNullOrWhiteSpace(phone) || !System.Text.RegularExpressions.Regex.IsMatch(phone, @"^[0-9]{10,11}$"))
            {
                Console.Write("S·ªë ƒëi·ªán tho·∫°i: ");
                phone = Console.ReadLine()?.Trim();
                if (string.IsNullOrWhiteSpace(phone) || !System.Text.RegularExpressions.Regex.IsMatch(phone, @"^[0-9]{10,11}$"))
                    Console.WriteLine("‚ùå S·ªë ƒëi·ªán tho·∫°i ph·∫£i l√† 10 ho·∫∑c 11 s·ªë!");
            }

            string? email = null;
            while (string.IsNullOrWhiteSpace(email) || !System.Text.RegularExpressions.Regex.IsMatch(email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
            {
                Console.Write("Email: ");
                email = Console.ReadLine()?.Trim();
                if (string.IsNullOrWhiteSpace(email) || !System.Text.RegularExpressions.Regex.IsMatch(email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
                    Console.WriteLine("‚ùå Email kh√¥ng h·ª£p l·ªá!");
            }

            var doctor = new Doctor
            {
                FullName = fullName,
                Specialty = specialty ?? string.Empty, // S·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu null
                Phone = phone ?? string.Empty,
                Email = email ?? string.Empty // ƒê·∫£m b·∫£o required property ƒë∆∞·ª£c kh·ªüi t·∫°o
            };

            try
            {
                bus.Add(doctor);
                Console.WriteLine("‚úÖ Th√™m b√°c sƒ© th√†nh c√¥ng!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói: {ex.Message}");
            }
        }

        private static void View(DoctorBUS bus)
        {
            var list = bus.GetAll();
            if (list.Count == 0)
            {
                Console.WriteLine("üì≠ Kh√¥ng c√≥ b√°c sƒ©.");
                return;
            }

            foreach (var d in list)
                Console.WriteLine($"ID: {d.Id}, T√™n: {d.FullName}, Chuy√™n m√¥n: {d.Specialty}, SƒêT: {d.Phone}, Email: {d.Email}");
        }

        private static void Update(DoctorBUS bus)
        {
            int id;
            while (true)
            {
                Console.Write("ID c·∫ßn c·∫≠p nh·∫≠t: ");
                if (int.TryParse(Console.ReadLine(), out id) && id > 0) break;
                Console.WriteLine("‚ùå ID kh√¥ng h·ª£p l·ªá.");
            }

            string? fullName = null;
            while (string.IsNullOrWhiteSpace(fullName) || fullName.Length < 3 || fullName.Length > 50 || !System.Text.RegularExpressions.Regex.IsMatch(fullName, @"^[\p{L}\s]+$"))
            {
                Console.Write("T√™n m·ªõi: ");
                fullName = Console.ReadLine()?.Trim();
                if (string.IsNullOrWhiteSpace(fullName) || fullName.Length < 3 || fullName.Length > 50 || !System.Text.RegularExpressions.Regex.IsMatch(fullName, @"^[\p{L}\s]+$"))
                    Console.WriteLine("‚ùå T√™n ph·∫£i t·ª´ 3 ƒë·∫øn 50 k√Ω t·ª± v√† ch·ªâ ch·ª©a ch·ªØ c√°i!");
            }

            string? specialty = null;
            while (specialty != null && specialty.Length > 100)
            {
                Console.Write("Chuy√™n m√¥n m·ªõi (nh·∫•n Enter ƒë·ªÉ b·ªè qua): ");
                specialty = Console.ReadLine()?.Trim();
                if (specialty != null && specialty.Length > 100)
                    Console.WriteLine("‚ùå Chuy√™n m√¥n kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 100 k√Ω t·ª±!");
            }

            string? phone = null;
            while (string.IsNullOrWhiteSpace(phone) || !System.Text.RegularExpressions.Regex.IsMatch(phone, @"^[0-9]{10,11}$"))
            {
                Console.Write("S·ªë ƒëi·ªán tho·∫°i m·ªõi: ");
                phone = Console.ReadLine()?.Trim();
                if (string.IsNullOrWhiteSpace(phone) || !System.Text.RegularExpressions.Regex.IsMatch(phone, @"^[0-9]{10,11}$"))
                    Console.WriteLine("‚ùå S·ªë ƒëi·ªán tho·∫°i ph·∫£i l√† 10 ho·∫∑c 11 s·ªë!");
            }

            string? email = null;
            while (string.IsNullOrWhiteSpace(email) || !System.Text.RegularExpressions.Regex.IsMatch(email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
            {
                Console.Write("Email m·ªõi: ");
                email = Console.ReadLine()?.Trim();
                if (string.IsNullOrWhiteSpace(email) || !System.Text.RegularExpressions.Regex.IsMatch(email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
                    Console.WriteLine("‚ùå Email kh√¥ng h·ª£p l·ªá!");
            }

            var doctor = new Doctor
            {
                Id = id,
                FullName = fullName,
                Specialty = specialty ?? string.Empty, // S·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu null
                Phone = phone ?? string.Empty,
                Email = email ?? string.Empty // ƒê·∫£m b·∫£o required property ƒë∆∞·ª£c kh·ªüi t·∫°o
            };

            try
            {
                bus.Update(doctor);
                Console.WriteLine("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói: {ex.Message}");
            }
        }

        private static void Delete(DoctorBUS bus)
        {
            int id;
            while (true)
            {
                Console.Write("ID c·∫ßn x√≥a: ");
                if (int.TryParse(Console.ReadLine(), out id) && id > 0) break;
                Console.WriteLine("‚ùå ID kh√¥ng h·ª£p l·ªá.");
            }

            try
            {
                bus.Delete(id);
                Console.WriteLine("‚úÖ ƒê√£ x√≥a b√°c sƒ©!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói: {ex.Message}");
            }
        }
    }
}