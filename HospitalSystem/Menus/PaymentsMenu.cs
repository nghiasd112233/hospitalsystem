using System;
using System.Linq;
using HospitalSystem.BUS;
using HospitalSystem.Models;

namespace HospitalSystem.Menus
{
    public static class PaymentsMenu
    {
        public static void Show(PaymentBUS bus)
        {
            while (true)
            {
                Console.WriteLine("\n=== Qu·∫£n L√Ω Thanh To√°n ===");
                Console.WriteLine("1. Th√™m thanh to√°n");
                Console.WriteLine("2. Xem danh s√°ch thanh to√°n");
                Console.WriteLine("3. C·∫≠p nh·∫≠t thanh to√°n");
                Console.WriteLine("4. X√≥a thanh to√°n");
                Console.WriteLine("5. Quay l·∫°i");
                Console.Write("Ch·ªçn: ");

                var choice = Console.ReadLine();
                switch (choice)
                {
                    case "1": Add(bus); break;
                    case "2": View(bus); break;
                    case "3": Update(bus); break;
                    case "4": Delete(bus); break;
                    case "5": return;
                    default: Console.WriteLine("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá."); break;
                }
            }
        }

        private static void Add(PaymentBUS bus)
        {
            int patientId;
            while (true)
            {
                Console.Write("ID b·ªánh nh√¢n: ");
                if (int.TryParse(Console.ReadLine(), out patientId) && patientId > 0) break;
                Console.WriteLine("‚ùå ID b·ªánh nh√¢n kh√¥ng h·ª£p l·ªá!");
            }

            decimal amount;
            while (true)
            {
                Console.Write("S·ªë ti·ªÅn: ");
                if (decimal.TryParse(Console.ReadLine(), out amount) && amount > 0) break;
                Console.WriteLine("‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!");
            }

            DateTime paymentDate;
            while (true)
            {
                Console.Write("Ng√†y thanh to√°n (yyyy-MM-dd): ");
                if (DateTime.TryParse(Console.ReadLine(), out paymentDate) && paymentDate >= new DateTime(1900, 1, 1) && paymentDate <= DateTime.Now) break;
                Console.WriteLine("‚ùå Ng√†y thanh to√°n ph·∫£i t·ª´ nƒÉm 1900 ƒë·∫øn hi·ªán t·∫°i!");
            }

            string? paymentMethod = null;
            while (string.IsNullOrWhiteSpace(paymentMethod) || !new[] { "Ti·ªÅn m·∫∑t", "Th·∫ª t√≠n d·ª•ng", "Chuy·ªÉn kho·∫£n" }.Contains(paymentMethod))
            {
                Console.Write("Ph∆∞∆°ng th·ª©c (Ti·ªÅn m·∫∑t/Th·∫ª t√≠n d·ª•ng/Chuy·ªÉn kho·∫£n): ");
                paymentMethod = Console.ReadLine()?.Trim();
                if (string.IsNullOrWhiteSpace(paymentMethod) || !new[] { "Ti·ªÅn m·∫∑t", "Th·∫ª t√≠n d·ª•ng", "Chuy·ªÉn kho·∫£n" }.Contains(paymentMethod))
                    Console.WriteLine("‚ùå Ph∆∞∆°ng th·ª©c ph·∫£i l√† Ti·ªÅn m·∫∑t, Th·∫ª t√≠n d·ª•ng ho·∫∑c Chuy·ªÉn kho·∫£n!");
            }

            var payment = new Payment
            {
                PatientId = patientId,
                Amount = amount,
                PaymentDate = paymentDate,
                PaymentMethod = paymentMethod ?? string.Empty // ƒê·∫£m b·∫£o required property ƒë∆∞·ª£c kh·ªüi t·∫°o
            };

            try
            {
                bus.Add(payment);
                Console.WriteLine("‚úÖ Th√™m thanh to√°n th√†nh c√¥ng!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói: {ex.Message}");
            }
        }

        private static void View(PaymentBUS bus)
        {
            var list = bus.GetAll();
            if (list.Count == 0)
            {
                Console.WriteLine("üì≠ Kh√¥ng c√≥ thanh to√°n.");
                return;
            }

            foreach (var p in list)
                Console.WriteLine($"ID: {p.Id}, ID b·ªánh nh√¢n: {p.PatientId}, S·ªë ti·ªÅn: {p.Amount}, Ng√†y: {p.PaymentDate:yyyy-MM-dd}, Ph∆∞∆°ng th·ª©c: {p.PaymentMethod}");
        }

        private static void Update(PaymentBUS bus)
        {
            int id;
            while (true)
            {
                Console.Write("ID c·∫ßn c·∫≠p nh·∫≠t: ");
                if (int.TryParse(Console.ReadLine(), out id) && id > 0) break;
                Console.WriteLine("‚ùå ID kh√¥ng h·ª£p l·ªá.");
            }

            int patientId;
            while (true)
            {
                Console.Write("ID b·ªánh nh√¢n m·ªõi: ");
                if (int.TryParse(Console.ReadLine(), out patientId) && patientId > 0) break;
                Console.WriteLine("‚ùå ID b·ªánh nh√¢n kh√¥ng h·ª£p l·ªá!");
            }

            decimal amount;
            while (true)
            {
                Console.Write("S·ªë ti·ªÅn m·ªõi: ");
                if (decimal.TryParse(Console.ReadLine(), out amount) && amount > 0) break;
                Console.WriteLine("‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!");
            }

            DateTime paymentDate;
            while (true)
            {
                Console.Write("Ng√†y thanh to√°n m·ªõi (yyyy-MM-dd): ");
                if (DateTime.TryParse(Console.ReadLine(), out paymentDate) && paymentDate >= new DateTime(1900, 1, 1) && paymentDate <= DateTime.Now) break;
                Console.WriteLine("‚ùå Ng√†y thanh to√°n ph·∫£i t·ª´ nƒÉm 1900 ƒë·∫øn hi·ªán t·∫°i!");
            }

            string? paymentMethod = null;
            while (string.IsNullOrWhiteSpace(paymentMethod) || !new[] { "Ti·ªÅn m·∫∑t", "Th·∫ª t√≠n d·ª•ng", "Chuy·ªÉn kho·∫£n" }.Contains(paymentMethod))
            {
                Console.Write("Ph∆∞∆°ng th·ª©c m·ªõi (Ti·ªÅn m·∫∑t/Th·∫ª t√≠n d·ª•ng/Chuy·ªÉn kho·∫£n): ");
                paymentMethod = Console.ReadLine()?.Trim();
                if (string.IsNullOrWhiteSpace(paymentMethod) || !new[] { "Ti·ªÅn m·∫∑t", "Th·∫ª t√≠n d·ª•ng", "Chuy·ªÉn kho·∫£n" }.Contains(paymentMethod))
                    Console.WriteLine("‚ùå Ph∆∞∆°ng th·ª©c ph·∫£i l√† Ti·ªÅn m·∫∑t, Th·∫ª t√≠n d·ª•ng ho·∫∑c Chuy·ªÉn kho·∫£n!");
            }

            var payment = new Payment
            {
                Id = id,
                PatientId = patientId,
                Amount = amount,
                PaymentDate = paymentDate,
                PaymentMethod = paymentMethod ?? string.Empty // ƒê·∫£m b·∫£o required property ƒë∆∞·ª£c kh·ªüi t·∫°o
            };

            try
            {
                bus.Update(payment);
                Console.WriteLine("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói: {ex.Message}");
            }
        }

        private static void Delete(PaymentBUS bus)
        {
            int id;
            while (true)
            {
                Console.Write("ID c·∫ßn x√≥a: ");
                if (int.TryParse(Console.ReadLine(), out id) && id > 0) break;
                Console.WriteLine("‚ùå ID kh√¥ng h·ª£p l·ªá.");
            }

            try
            {
                bus.Delete(id);
                Console.WriteLine("‚úÖ ƒê√£ x√≥a thanh to√°n!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói: {ex.Message}");
            }
        }
    }
}